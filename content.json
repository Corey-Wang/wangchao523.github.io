{"meta":{"title":"Corey.Wang","subtitle":null,"description":null,"author":"Corey Wang","url":"http://corey.wang"},"pages":[],"posts":[{"title":"职场学习比较遵循721原则","slug":"职场学习比较遵循721原则","date":"2018-10-11T11:12:23.000Z","updated":"2018-10-11T11:12:44.075Z","comments":true,"path":"2018/10/11/职场学习比较遵循721原则/","link":"","permalink":"http://corey.wang/2018/10/11/职场学习比较遵循721原则/","excerpt":"","text":"70%来自于工作实践；20%来自他人经验传授；10%来自理论的学习","categories":[],"tags":[{"name":"个人品牌","slug":"个人品牌","permalink":"http://corey.wang/tags/个人品牌/"}]},{"title":"非职权影响力","slug":"非职权影响力","date":"2018-10-11T07:32:31.000Z","updated":"2018-10-11T08:41:22.270Z","comments":true,"path":"2018/10/11/非职权影响力/","link":"","permalink":"http://corey.wang/2018/10/11/非职权影响力/","excerpt":"","text":"基本概念定义影响力是运用力量以改变某个人的:个性、理念认知、或行为行动。 这些力量包括:丼证引例、造成恐惧、赞美肯定、权势财富等等。 为什么要有非职权影响力在没有职权的情况，如何推动项目、如果让自己的想法落地/目标达成。在当前大环境中越来越需要团队配合，这方面更需要个人影响力来达成目标。 个人口碑如何建立个人口碑 其他资料TED-影响力 https://www.ted.com/talks/angela_lee_duckworth_grit_the_power_of_passion_and_perseverance?language=zh-tw","categories":[],"tags":[{"name":"个人品牌","slug":"个人品牌","permalink":"http://corey.wang/tags/个人品牌/"}]},{"title":"mac使用pf做端口转发","slug":"mac使用pf做端口转发","date":"2018-09-25T01:55:08.000Z","updated":"2018-09-25T02:07:35.834Z","comments":true,"path":"2018/09/25/mac使用pf做端口转发/","link":"","permalink":"http://corey.wang/2018/09/25/mac使用pf做端口转发/","excerpt":"","text":"背景线上一个问题，但和cookie有关，需要用到域名，所以通过本地host来将域名指向127.0.0.1， 但由于https端口只能是443了，mac无法直接绑定，需要使用ROOT权限。所以想到可以使用端口转发的技术，网上搜到了pfctl。 操作步骤新建转发规则在这个目录下/etc/pf.anchors 新建一个文件，如443（名称自定定义就行），内容如下：1rdr pass on lo0 inet proto tcp from any to any port 443 -&gt; 127.0.0.1 port 8443 lo0是网卡，可以通过ifconfig查看127.0.0.1对应的网卡名 将配置添加到pf.conf中/etc/pf.conf12345678scrub-anchor &quot;com.apple/*&quot;nat-anchor &quot;com.apple/*&quot;rdr-anchor &quot;com.apple/*&quot;rdr-anchor &quot;forwarding&quot;dummynet-anchor &quot;com.apple/*&quot;anchor &quot;com.apple/*&quot;load anchor &quot;com.apple&quot; from &quot;/etc/pf.anchors/com.apple&quot;load anchor &quot;forwarding&quot; from &quot;/etc/pf.anchors/443&quot; 其中4行，8行的forwarding是新增的，com.apple是系统自带的。注意这里一定要保证顺序 启动pf1sudo pfctl -ef /etc/pf.conf 关闭pf1sudo pfctl -d 强制重启1sudo pfctl -E 更多介绍12# 自己来看吧man pfctl","categories":[],"tags":[{"name":"mac, proxy","slug":"mac-proxy","permalink":"http://corey.wang/tags/mac-proxy/"}]},{"title":"vscode extensions install","slug":"vscode--extensions-install","date":"2018-08-21T03:23:50.000Z","updated":"2018-08-23T06:09:04.376Z","comments":true,"path":"2018/08/21/vscode--extensions-install/","link":"","permalink":"http://corey.wang/2018/08/21/vscode--extensions-install/","excerpt":"","text":"背景最近在搞一个vscode插件，但由于公司内容使用，无法发不到市场，所以必须自己搞一个升级能力 命令行安装插件1code --install-extension vsix_file 如果提示没有code命令，需要在在vscode中执行 cmd+shift+p –&gt; Shell Command: Install ‘code’ command in PATH vscode安装插件源码分析（通过vsix包安装）https://github.com/Microsoft/vscode/blob/master/src/vs/platform/extensionManagement/node/extensionManagementService.ts1234567891011121314151617181920212223242526272829303132install(zipPath: string): TPromise&lt;void&gt; &#123; zipPath = path.resolve(zipPath); return validateLocalExtension(zipPath) .then(manifest =&gt; &#123; const identifier = &#123; id: getLocalExtensionIdFromManifest(manifest) &#125;; if (manifest.engines &amp;&amp; manifest.engines.vscode &amp;&amp; !isEngineValid(manifest.engines.vscode)) &#123; return TPromise.wrapError&lt;void&gt;(new Error(nls.localize(&apos;incompatible&apos;, &quot;Unable to install Extension &apos;&#123;0&#125;&apos; as it is not compatible with Code &apos;&#123;1&#125;&apos;.&quot;, identifier.id, pkg.version))); &#125; return this.removeIfExists(identifier.id) .then( () =&gt; this.checkOutdated(manifest) .then(validated =&gt; &#123; if (validated) &#123; this.logService.info(&apos;Installing the extension:&apos;, identifier.id); this._onInstallExtension.fire(&#123; identifier, zipPath &#125;); return this.getMetadata(getGalleryExtensionId(manifest.publisher, manifest.name)) .then( metadata =&gt; this.installFromZipPath(identifier, zipPath, metadata, manifest), error =&gt; this.installFromZipPath(identifier, zipPath, null, manifest)) .then( () =&gt; &#123; this.logService.info(&apos;Successfully installed the extension:&apos;, identifier.id); &#125;, e =&gt; &#123; this.logService.error(&apos;Failed to install the extension:&apos;, identifier.id, e.message); return TPromise.wrapError(e); &#125;); &#125; return null; &#125;), e =&gt; TPromise.wrapError(new Error(nls.localize(&apos;restartCode&apos;, &quot;Please restart Code before reinstalling &#123;0&#125;.&quot;, manifest.displayName || manifest.name)))); &#125;);&#125; 我的实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * 插件升级 */ public async extensionUpdate() &#123; console.log(&apos;coding extension is updating...&apos;); const ext = vscode.extensions.getExtension(&apos;coding&apos;); if (ext !== undefined) &#123; const json = ext.packageJSON; request(`$&#123;SERVER_URL_BASE&#125;versionUpdate?name=$&#123;json.id&#125;&amp;v=$&#123;json.version&#125;`, function (error, response, body) &#123; if (response &amp;&amp; response.statusCode === 200) &#123; const localDir = `$&#123;os.homedir&#125;/.coding/vsix/`; if (!fs.existsSync(localDir)) &#123; fs.mkdirSync(localDir); &#125; const updateJson = JSON.parse(body); download(updateJson.vsix, localDir, &#123;filename: &apos;coding-new.vsix&apos;&#125;).then(() =&gt; &#123; const vsix = `$&#123;localDir&#125;coding-new.vsix`; cp.exec(`bin/code --install-extension $&#123;vsix&#125;`, &#123;cwd: vscode.env.appRoot&#125;, (error, stdout, stderr) =&gt; &#123; if (error) &#123; console.error(`exec error: $&#123;error&#125;`); return; &#125; else if (stderr) &#123; console.error(`stderr: $&#123;stderr&#125;`); return; &#125; else if (stdout.indexOf(&apos;successfully installed&apos;) &lt; 0) &#123; console.log(`stdout: $&#123;stdout&#125;`); return; &#125; console.log(`stdout: $&#123;stdout&#125;`); fs.unlinkSync(vsix); // delete file vscode.window.showInformationMessage(&apos;Successfully installed the coding extension. Reload to enable it.&apos;, &apos;Reload Now&apos;).then(selected =&gt; &#123; if (selected === &apos;Reload Now&apos;) &#123; vscode.commands.executeCommand(&apos;workbench.action.reloadWindow&apos;); &#125; &#125;); console.log(&apos;coding of extension update successed!&apos;); &#125;); &#125;); &#125; else &#123; console.log(&apos;update check error response code: &apos;, response); &#125; &#125;); &#125; &#125;","categories":[{"name":"技术 vscode","slug":"技术-vscode","permalink":"http://corey.wang/categories/技术-vscode/"}],"tags":[]},{"title":"经历手足(二)","slug":"经历手足口2","date":"2018-08-19T16:16:14.000Z","updated":"2018-08-19T16:25:46.797Z","comments":true,"path":"2018/08/20/经历手足口2/","link":"","permalink":"http://corey.wang/2018/08/20/经历手足口2/","excerpt":"","text":"情况转好又是一个周末，离发现病情已经一周了。这个周末原本是计划去草原玩的，再不去草就该黄了。但当前的情况让我直接放弃了本次计划。周五是七夕，丸子妈妈加班到晚上11点才回家，完美的错过了七夕。不过也挺好，避开了人山人海的商场。周五晚上回来，询问了丸子的情况，可以自己吃饭了，而且不再喊嘴疼了，我看了看下嘴唇，泡还是有的。 大病初愈周末的两天，感觉那个能吃能喝的丸子回来了，坐在自己的小桌子上，一口气吃了7个饺子，还吃了不少菜，喝了一碗鱼粥。能吃能喝就是好，人也有精神了，一天往楼下跑五六趟，都不带累的。奶奶、爷爷、丸子妈妈还有我也就放心多了。 后续观察虽然情况已经转好了，但还没有过病毒期（医院说是2周），为避免传染给其他小朋友，我们还是尽量在人少的地方玩或者自己玩。继续观察下周的情况吧。","categories":[{"name":"生活","slug":"生活","permalink":"http://corey.wang/categories/生活/"}],"tags":[]},{"title":"幼儿园的报名（一）","slug":"幼儿园的报名1","date":"2018-08-17T01:26:11.000Z","updated":"2018-08-17T01:31:36.686Z","comments":true,"path":"2018/08/17/幼儿园的报名1/","link":"","permalink":"http://corey.wang/2018/08/17/幼儿园的报名1/","excerpt":"","text":"幼儿园报名今年在为明年的幼儿园奔波小丸子马上两岁了，平常我和丸子妈妈也会带她一起在楼下玩，有几个经常一起玩的小伙伴已经三岁了，今年九月份就要上幼儿园了。于是我们也参与了幼儿园的讨论，自己也咨询了周边的几个幼儿园，特别好的机关幼儿园直接把我们非企业单位的子女拒之门外。门口的培杰幼儿园时我的兜底的备选，因为这儿不需要提前报名，但由于刚办没两年，收费贵、家长评论好坏不一，心里多少有些担心，唯一也是最大的好处就是近，离小区100米内的距离。然而丸子妈妈却不想就这样算了，毕竟要找个相对好些的。后来聊天谈起了万科的为明幼儿园，整体环境、网上评价以及身边人的评价都是相对好些的。所以将目标锁定再了这个幼儿园 为明一点不光明从万科商场回来的路上，绕路路过了为明幼儿园，再门口和保安简单的沟通了下报名的时间，这会儿大概是在3，4月份的样子，具体的日子已经忘了。心里还是不方向，第二天早晨拨打了幼儿园的电话，让人抓狂的时一个小时反复的拨打竟然没有人接。再吃午饭前运气好，电话接通了。我不是很确定对方是不是负责招生这块，但我得到了一个确定的讯息：可提前一年报亲子班，第二年可以直接入园，就不需要再排队了。简单咨询了亲子班报名的要求，然而并没有具体信息，只是让等通知，具体通知他们会在幼儿园附近发传单，大概是在6，7月份左右。挂了电话，我在想，平常也不会经过幼儿园，再加上工作日早出晚归，幼儿园的传单基本是不会发到我手里了。再后来，这事也慢慢的忘记了。再次想起来是小区幼儿园微信群里开始讨论报名的事情。这会丸子妈妈开始催我去万科幼儿园问问。正好那几天我休假在家。还记得那几天下着特大的雨，早晨带着两把伞，但是还是淋湿了上衣。在商场玩到中午一点多，丸子已经睡着了。我坐在商场的角落里，也半睡半醒的样子。大概刚过两点钟，我实在坐不住了，推着小车出了商场，这会雨还在下着。一刻钟后我来到了幼儿园门口，看到有其他家长带着孩子过来，我跟门卫聊了几句。门卫让我先登个记，结果发现我没有北京户口，而且也不是万科的业主，看着很不情愿的样子，也没有打算让我进园里的意思，简单的说了几句让我回家等消息，便把我打发了。 意见不一致会怎样我心里还是比较反感这类事情，内心认为既然这样，那我干嘛非去不可呢。但恰恰相反，就在某天，小丸子的小伙伴家在万科报上了亲子班，丸子妈妈这时坐不住了，对我各种指挥，就差发12道加急圣旨了。今天（写文章当天）听103.9聊婚房的事情，主持人说两个人结婚前一定要做的事情是一起出去旅游，还有另一件事是装修房子，这样会把双方的磨合的更好。现在我想加一条：教育孩子。当然了，我是属于爱妥协的那一方。毕竟再教育孩子方面双方都是摸索着做，没有必然的对错。也为了避免产生更大的矛盾。 终于报名了就在悠悠报名后的俩小时，我出现在了幼儿园，且上次和门卫有过交流，知道了他们的套路，我成功了绕过了门卫，进了楼里边。但却被其他老师告知管招聘的老师休假了，要一周后回来。但我也很纳闷刚刚小伙伴才报完的啊！回到公司后和丸子妈妈聊起这事，被鄙视的无地自容。第二天一早，丸子妈妈、我、小丸子仨人一起去了幼儿园，当得到相同结论的时候，我内心可以算松了一口气。一周后的早晨，我带着小丸子又来了幼儿园，这次招生的老师在呢，而且悠悠的爸爸提前给老师打了招呼，整个报名还算顺利，中间回家拿了趟证件，当天就把信息都登记完了。然后给开了体检的要求。一般到这步，说明已经接收了，终于可以放心了。","categories":[{"name":"生活","slug":"生活","permalink":"http://corey.wang/categories/生活/"}],"tags":[]},{"title":"经历手足口（一）","slug":"经历手足口1","date":"2018-08-17T01:10:43.000Z","updated":"2018-08-17T01:11:36.082Z","comments":true,"path":"2018/08/17/经历手足口1/","link":"","permalink":"http://corey.wang/2018/08/17/经历手足口1/","excerpt":"","text":"听说手足口病相信有孩子的人对这个病并不陌生，也非常多的家庭经历过这种病。当小丸子一岁的时候（大概去年这会儿），再小区遛弯时，听小区的阿姨说门口幼儿园有个孩子得手足口了，好像是咱们小区的。具体是谁不清楚，整个幼儿园都放假了。回到家和老妈聊起这事，对他们的反应挺惊讶，让人感觉这是特别严重的病，于是自己搜了百科，补了知识。然而事情没有发生到自己身上，而后就忘记了 是否接种手足口疫苗接种再北京的疫苗计划中是可选的，本着能不打就不打的原则，包括水痘在内都没有接种，所以也没有在意 赶紧去体检小丸子的幼儿园亲子班已经报名通过了，剩下了体检，孩子和大人都需要检查，身体健康才能愉快的玩耍，这个还是有必要的。第二天早晨7点半就带着小丸子出门了，计划着八点前能到，排队取号。尽快完事好吃饭上班。然而尴尬的是我排了半天队，却选错了地方（以为是在预防接种哪里）。还好离得不远，赶过去已经八点半了。队伍排了很长，都是来做体检入园的，看年龄都应该在三岁以上。大概排了40分钟，领了体检单子，看了下内容，仅仅包含三项：身高体重、视力听力、抽血。唯独抽血人排了很长的队。不知道什么时候起，小丸子开始害怕打针抽血了，完全没有了一年前的勇敢，后来她跟我说：爸爸，打针疼。 体检不合格小丸子的检查还算顺利，只不过结果需要等三天。周四的早晨我也赶紧去妇幼挂号体验了，这个队伍可不比孩子体检的短。包含很多去幼儿工作的人。丸子妈妈检查完跟我说：看看体检的人，感觉整个教育水平真低，为孩子上学担忧。我的体检结果下午就出来了，然而却不合格！间隔一周，我又去补检，还是不合格！不知道身体出了什么问题，放弃检查了。 接种水痘幼儿园要求上亲子班前需要接种水痘。于是赶紧再体检后的第二周的周三下午去接种了水痘。 手足口来了周末带小丸子出去玩，再外边吃的饭，可是她却什么都不想吃，抱着一大杯西瓜汁喝个没完，后来又喝了点酸奶。我也根本没有在意，毕竟以前也出现过类似的情况。周一下边回家，丸子奶奶说小丸子嘴疼，看着里面有泡。丸子妈妈拿着手机照着亮，检查了下口腔。两边脸颊一边一个。还好妇幼晚上还有人值班，去抽血做了检查。大夫告知这是手足口，询问了些情况，比如有没有发烧之类的。开了些药就让回家休息了，两周内少出门，少和其他小朋友接触，避免传染。 利巴韦林第二天，我在家陪小丸子，她还是那个状态，什么都不吃，肚子已经瘪了，奶也不喝，除非是饿急了，一天下来才喝了三顿奶。丸子妈妈打电话回来问了问情况，然后让我去买利巴韦林喷雾。我在网上搜了下送药服务，并没有发现这个药。晚上，又去了趟妇幼医院，跟大夫说要这个药，大夫没好气的把我说了一顿，大概是乱吃药的原因，跟我说别光信网上说的那些。这个药跟你家姑娘不对症。喷雾只有14块钱，大夫也懒得跟我讲道理了，说：这药也不贵，我给你开个吧，但吃不吃你自己看，我是不建议使用这个。我当然也知道为什么了，副作用特别的大。 煎熬的日子第二天再我的陪同下，小丸子是滴水补喝，药也不吃。第三天丸子妈妈在家，整个状态好很多，妈妈给发的QQ视频，看小丸子完全变了个人，玩滑梯、喝豆花、喝黄瓜水、跟妈妈玩钓鱼。感觉完全好了一样。但一天也没吃药。第四天早晨起来，又没精神了，应该还是嘴巴疼。","categories":[{"name":"生活","slug":"生活","permalink":"http://corey.wang/categories/生活/"}],"tags":[]},{"title":"PPAgent启动加载过程","slug":"PPAgent启动加载过程","date":"2017-06-02T09:02:47.000Z","updated":"2018-08-17T01:00:44.985Z","comments":true,"path":"2017/06/02/PPAgent启动加载过程/","link":"","permalink":"http://corey.wang/2017/06/02/PPAgent启动加载过程/","excerpt":"","text":"知识点 -javaagent xxx.jar, 实现premain()Class.getConstructorjava.lang.reflect.ConstructorServiceLoader.load, 简单理解是获取某个接口（服务）的实现类，扫描META-INF/services下的配置TraceMetadataProvider接口的实现类ClassFileTransformer.transform, 重点看ProfilePluginLoader实现类 图一 图二 图三","categories":[{"name":"技术","slug":"技术","permalink":"http://corey.wang/categories/技术/"}],"tags":[{"name":"pinpoint","slug":"pinpoint","permalink":"http://corey.wang/tags/pinpoint/"}]},{"title":"PHP  详解","slug":"PHP-详解","date":"2017-05-05T01:54:10.000Z","updated":"2018-08-17T01:00:47.653Z","comments":true,"path":"2017/05/05/PHP-详解/","link":"","permalink":"http://corey.wang/2017/05/05/PHP-详解/","excerpt":"","text":"超全局变量http://php.net/manual/zh/language.variables.superglobals.php1234567891011121314151617181920212223242526272829303132$_SERVER[&apos;PHP_SELF&apos;] #当前正在执行脚本的文件名，与 document root相关。$_SERVER[&apos;argv&apos;] #传递给该脚本的参数。$_SERVER[&apos;argc&apos;] #包含传递给程序的命令行参数的个数（如果运行在命令行模式）。$_SERVER[&apos;GATEWAY_INTERFACE&apos;] #服务器使用的 CGI 规范的版本。例如，“CGI/1.1”。$_SERVER[&apos;SERVER_NAME&apos;] #当前运行脚本所在服务器主机的名称。$_SERVER[&apos;SERVER_SOFTWARE&apos;] #服务器标识的字串，在响应请求时的头部中给出。$_SERVER[&apos;SERVER_PROTOCOL&apos;] #请求页面时通信协议的名称和版本。例如，“HTTP/1.0”。$_SERVER[&apos;REQUEST_METHOD&apos;] #访问页面时的请求方法。例如：“GET”、“HEAD”，“POST”，“PUT”。$_SERVER[&apos;QUERY_STRING&apos;] #查询(query)的字符串。$_SERVER[&apos;DOCUMENT_ROOT&apos;] #当前运行脚本所在的文档根目录。在服务器配置文件中定义。$_SERVER[&apos;HTTP_ACCEPT&apos;] #当前请求的 Accept: 头部的内容。$_SERVER[&apos;HTTP_ACCEPT_CHARSET&apos;] #当前请求的 Accept-Charset: 头部的内容。例如：“iso-8859-1,*,utf-8”。$_SERVER[&apos;HTTP_ACCEPT_ENCODING&apos;] #当前请求的 Accept-Encoding: 头部的内容。例如：“gzip”。$_SERVER[&apos;HTTP_ACCEPT_LANGUAGE&apos;] #当前请求的 Accept-Language: 头部的内容。例如：“en”。$_SERVER[&apos;HTTP_CONNECTION&apos;] #当前请求的 Connection: 头部的内容。例如：“Keep-Alive”。$_SERVER[&apos;HTTP_HOST&apos;] #当前请求的 Host: 头部的内容。$_SERVER[&apos;HTTP_REFERER&apos;] #链接到当前页面的前一页面的 URL 地址。$_SERVER[&apos;HTTP_USER_AGENT&apos;] #当前请求的 User_Agent: 头部的内容。$_SERVER[&apos;HTTPS&apos;] 如果通过https访问,则被设为一个非空的值(on)，否则返回off$_SERVER[&apos;REMOTE_ADDR&apos;] #正在浏览当前页面用户的 IP 地址。$_SERVER[&apos;REMOTE_HOST&apos;] #正在浏览当前页面用户的主机名。$_SERVER[&apos;REMOTE_PORT&apos;] #用户连接到服务器时所使用的端口。$_SERVER[&apos;SCRIPT_FILENAME&apos;] #当前执行脚本的绝对路径名。$_SERVER[&apos;SERVER_ADMIN&apos;] #管理员信息$_SERVER[&apos;SERVER_PORT&apos;] #服务器所使用的端口$_SERVER[&apos;SERVER_SIGNATURE&apos;] #包含服务器版本和虚拟主机名的字符串。$_SERVER[&apos;PATH_TRANSLATED&apos;] #当前脚本所在文件系统（不是文档根目录）的基本路径。$_SERVER[&apos;SCRIPT_NAME&apos;] #包含当前脚本的路径。这在页面需要指向自己时非常有用。$_SERVER[&apos;REQUEST_URI&apos;] #访问此页面所需的 URI。例如，“/index.html”。$_SERVER[&apos;PHP_AUTH_USER&apos;] #在 Apache模块下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。$_SERVER[&apos;PHP_AUTH_PW&apos;] #当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。$_SERVER[&apos;AUTH_TYPE&apos;] #当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型。 phpinfo() 实现位置：ext/standard/info.c","categories":[{"name":"技术","slug":"技术","permalink":"http://corey.wang/categories/技术/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://corey.wang/tags/PHP/"}]},{"title":"OpenResty","slug":"OpenResty","date":"2017-04-25T10:20:29.000Z","updated":"2018-08-17T01:01:06.866Z","comments":true,"path":"2017/04/25/OpenResty/","link":"","permalink":"http://corey.wang/2017/04/25/OpenResty/","excerpt":"","text":"一句话介绍 OpenResty = Nginx + LuaJit + more lib of Luaopenresty官网推荐学习教程：OpenResty 最佳实践 By 极客学院 安装OpenResty 没有比官网的文档更好的了OpenResty 安装 Nginx Lua模块化执行顺序1234567set_by_lua #流程分之处理判断变量初始化rewrite_by_lua #转发、重定向、缓存等功能(例如特定请求代理到外网)access_by_lua #IP 准入、接口权限等情况集中处理(例如配合 iptable 完成简单防火墙)content_by_lua #内容生成header_filter_by_lua #应答 HTTP 过滤处理(例如添加头部信息)body_filter_by_lua #应答 BODY 过滤处理(例如完成应答内容统一成大写)log_by_lua #回话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器) Lua Code Cache lua-nginx-module directives12# http, server, location, location iflua_code_cache off; #方便开发，线上一定要关闭，否则影响性能 Lua Kafka 使用的开源库：https://github.com/doujiang24/lua-resty-kafka直接下载源码到任意目录（最好是放到OpenResty/lualib下，方便统一管理）12# for http &#123;&#125;lua_package_path &quot;/path/to/lua-resty-kafka/lib/?.lua;;&quot;; 如果kafka使用了域名，需要在nginx.conf中开启dns解析，否则会导致域名解析失败，配置如下：12# for http &#123;&#125;resolver 10.10.10.10;","categories":[{"name":"技术","slug":"技术","permalink":"http://corey.wang/categories/技术/"}],"tags":[{"name":"OpenResty","slug":"OpenResty","permalink":"http://corey.wang/tags/OpenResty/"}]},{"title":"salt-api","slug":"salt-api","date":"2017-03-23T10:42:26.000Z","updated":"2018-08-17T01:00:41.913Z","comments":true,"path":"2017/03/23/salt-api/","link":"","permalink":"http://corey.wang/2017/03/23/salt-api/","excerpt":"","text":"###基础说明 salt-api对外提供https api接口，方便使用salt相关的功能salt-api需要部署在master的机器上[官方文档] (http://salt-api.readthedocs.io/en/latest/ref/netapis/all/saltapi.netapi.rest_cherrypy.html#a-rest-api-for-salt)，附件中是官方文档pdf版参考blog ###接口安全方面 salt-api使用前需要调用login api（帐号密码）来获取token，后续的api请求使用token即可 ###依赖 使用pip安装salt时，默认已经安装了salt-aisalt-api对外提供http服务，依赖Python的CherryPy库，这里需要检查本机是否已安装 ###配置过程 生成https证书123456cd /etc/pki/tls/certs# 生成自签名证书, 过程中需要输入key密码及RDNsmake testcertcd /etc/pki/tls/private/# 解密key文件，生成无密码的key文件, 过程中需要输入key密码，该密码为之前生成证书时设置的密码openssl rsa -in localhost.key -out localhost_nopass.key 创建salt-api的用户12useradd -M -s /sbin/nologin salt-apiecho &quot;salt-api-passwd&quot; | passwd salt-api —stdin 配置权限, eauth官网文档1234567#/etc/salt/master.d/eauth.confexternal_auth: pam: salt-api: - .* - &apos;@wheel&apos; - &apos;@runner&apos; 配置api端口、证书等, 这里使用了cherrypy库（python的web库）12345#/etc/salt/master.d/api.confrest_cherrypy: port: 8000 ssl_crt: /etc/pki/tls/certs/localhost.crt ssl_key: /etc/pki/tls/private/localhost_nopass.key 启动12salt-api -d --log-file-level=all#这里的日志级别为all是为了测试用，日志级别包含：&apos;all&apos;, &apos;garbage&apos;, &apos;trace&apos;, &apos;debug&apos;, &apos;profile&apos;, &apos;info&apos;, &apos;warning&apos;,&apos;error&apos;, &apos;critical&apos;, &apos;quiet&apos;. Default: &apos;warning&apos; ###api接口列表1返回JSON格式，head中增加Accept:application/json / 1234#GET获取当前的client#POST执行salt命令 /login1Log in to recieve a session token /logout12#POSTDestroy the currently active session and expire the session cookie /minions123456#GET /minions/(mid)有mid时，查询mid机器的详细信息，没有mid时查询所有的minion的详细信息#POST /minions远程执行命令，并返回jobid，相当于/执行命令中的client=local_async这里并没直接返回结果，需要通过jobs结果查询返回结果适合异步的场景 /jobs1234#GET /jobs/(jid)A convenience URL for getting lists of previously run jobs or getting the return from a single job有jid时，查询该job的详细结果无jid，返回job列表（执行job时的参数和jobid） /run12#POST不使用token的方式执行，这里需要每次请求带着用户名密码等认证信息 /events1#GET 需要深入了解 /ws123#GET /ws/(token)Return a websocket connection of Salt&apos;s event stream对url api的补充，大数据量时可以使用这个。 /hook12#POST /hook 具体用途还需了解Fire an event in Salt with a custom event tag and data /stats12#GET /statsExpose statistics on the running CherryPy server","categories":[{"name":"技术","slug":"技术","permalink":"http://corey.wang/categories/技术/"}],"tags":[{"name":"salt","slug":"salt","permalink":"http://corey.wang/tags/salt/"}]},{"title":"Salt Statck","slug":"Salt-Statck","date":"2017-03-23T10:39:47.000Z","updated":"2018-08-17T01:00:34.991Z","comments":true,"path":"2017/03/23/Salt-Statck/","link":"","permalink":"http://corey.wang/2017/03/23/Salt-Statck/","excerpt":"","text":"简介 SaltStack是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，一般可以理解为简化版的puppet和加强版的func。SaltStack基于Python语言实现，结合轻量级消息队列（ZeroMQ）与Python第三方模块（Pyzmq、PyCrypto、Pyjinjia2、python-msgpack和PyYAML等）构建。通过部署SaltStack环境，我们可以在成千上万台服务器上做到批量执行命令，根据不同业务特性进行配置集中化管理、分发文件、采集服务器数据、操作系统基础及软件包管理等，SaltStack是运维人员提高工作效率、规范业务配置与操作的利器。 使用版本 2016.11https://github.com/saltstack/salt 测试环境 1234567891011121台master， 2台minion``` - 模块及配置&gt; salt-master&gt; salt-minion&gt; [salt-api](http://corey.wang/2017/03/23/salt-api/) - salt命令解析 [blog](http://arlen.blog.51cto.com/7175583/1424684) [blog2](http://noodle.blog.51cto.com/2925423/1744607) [官方文档](https://docs.saltstack.com/en/latest/ref/cli/salt.html)- &lt;b&gt;个人整理&lt;/b&gt;```salt &apos;&lt;target&gt;&apos; &lt;function&gt; [arguments] 123456789101112131415161718192021222324salt &apos;*&apos; cp.get_file salt://jdk-8u121-linux-x64.rpm /tmp/jdk-8u121-linux-x64.rpm #把salt-master端对应文件拷贝到minion端相应目录下, salt://默认为/srv/salt，master中可以配置salt &apos;*&apos; cmd.run &apos;rpm -ivh /tmp/jdk-8u121-linux-x64.rpm&apos; #远程安装jdk， 可以增加template=jinja，使命令支持jinja模板，方便不同机器自动替换相应的参数salt &apos;*&apos; cp.get_file salt://apache-tomcat-8.0.35.zip /tmp/apache-tomcat-8.0.35.zip #copy tomcat到minionsalt &apos;*&apos; cmd.run &apos;cd ~ &amp; mkdir tools&apos; #远程创建tools文件夹，如果该文件夹已存在，*会报错*，使用salt &apos;*&apos; file.mkdir /tmp/wangchao36-test命令也可以salt &apos;*&apos; cmd.run &apos;unzip /tmp/apache-tomcat-8.0.35.zip -d /root/tools/&apos; #解压tomcatsalt &apos;*&apos; cmd.run &apos;chmod +x /root/tools/apache-tomcat-8.0.35/bin/*.sh &amp; /root/tools/apache-tomcat-8.0.35/bin/startup.sh&apos; #启动tomcatsalt &apos;*&apos; cmd.run &apos;ps -ef | grep tomcat&apos; # 查看tomcat关键词的进程 salt &apos;*&apos; pkg.install httpd #执行安装命令, 相当于apt-get, yumsalt &apos;*&apos; lowpkg.bin_pkg_info /tmp/jdk-8u121-linux-x64.rpm # 查询rpm包信息，lowpkg相当于rpm命令salt &apos;*&apos; cmd.script salt://scripts/runme.sh #远程执行一个脚本salt &apos;*&apos; cmd.run &apos;pip install psutil&apos; #ps模块需要提前安全psutilsalt &apos;*&apos; ps.pgrep tomcat full=true #查询tomcat相关进程的pidsalt &apos;*&apos; ps.psaux tomcat #ps aux |grep tomcat salt &apos;*&apos; file.append /root/tools/apache-tomcat-8.0.35/bin/catalina.sh dddd #在文件尾增加salt &apos;*&apos; file.grep /root/tools/apache-tomcat-8.0.35/bin/catalina.sh ddd #文件中查找salt &apos;*&apos; file.comment_line /root/tools/apache-tomcat-8.0.35/bin/catalina.sh ddd #行加注释salt &apos;*&apos; file.seek_read /root/tools/apache-tomcat-8.0.35/bin/catalina.sh 1000 0 #读salt &apos;*&apos; file.seek_write /root/tools/apache-tomcat-8.0.35/bin/catalina.sh &apos;#xxx&apos;1000 #写 1000为offset","categories":[{"name":"技术","slug":"技术","permalink":"http://corey.wang/categories/技术/"}],"tags":[{"name":"salt","slug":"salt","permalink":"http://corey.wang/tags/salt/"}]},{"title":"Storm入门","slug":"Storm入门","date":"2017-03-21T04:45:34.000Z","updated":"2018-08-17T01:03:15.837Z","comments":true,"path":"2017/03/21/Storm入门/","link":"","permalink":"http://corey.wang/2017/03/21/Storm入门/","excerpt":"","text":"简介 免费且开源的实时计算系统 简单可靠的处理流式数据，而Hadoop是使用的批处理 不受开发语言的限制（kryo序列化库） hadoop/spark/storm等对比 * hadoop M/R spark storm 存储 磁盘 内存 内存 数据集 现有数据集 现有数据集 实时 任务状态 作业管理 作业管理 常住内存 常用场景 离线的复杂的大数据处理 离线的快速大数据处理 在线的实时的大数据处理 Spark Streaming和Storm类似 read more storm核心概念官方抽象图 集群结构图 Topologies一个完整的计算主体，相当于是一个M/R任务，区别是M/R任务执行完会退出，而topology永远运行（除非被主动kill） Streams、tuplesStorm里面最核心的抽象，Streams使用tuple，tuples可以理解为最小的数据类型元组，可以为 integers, longs, shorts, bytes, strings, doubles, floats, booleans, and byte arrays。也支持自定义可序列化的类型 Spout数据源，一般是消息队列，将数据发送到Bolts Bolts具体执行数据分析的节点 Stream groupings定义了每个bolt的数据发送策略 shuffle grouping fields grouping All grouping(广播，所有bolts都会收到) etc. read more1 read more2 数据的一致性，可靠性 每个tuple拥有一个messageId Acker机制，每个Topology拥有一个Acker，可以追踪messageId Spout、Bolt发出数据后通知Acker自己处理的messageId 消息处理失败后，Tuple会被重新发出 举个例子1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677/** * This topology demonstrates Storm's stream groupings and multilang capabilities. * source: https://github.com/apache/storm/blob/v1.0.3/examples/storm-starter/src/jvm/org/apache/storm/starter/WordCountTopology.java */public class WordCountTopology &#123; public static class SplitSentence extends ShellBolt implements IRichBolt &#123; public SplitSentence() &#123; super(\"python\", \"splitsentence.py\"); &#125; @Override public void declareOutputFields(OutputFieldsDeclarer declarer) &#123; declarer.declare(new Fields(\"word\")); &#125; @Override public Map&lt;String, Object&gt; getComponentConfiguration() &#123; return null; &#125; &#125; public static class WordCount extends BaseBasicBolt &#123; Map&lt;String, Integer&gt; counts = new HashMap&lt;String, Integer&gt;(); @Override public void execute(Tuple tuple, BasicOutputCollector collector) &#123; String word = tuple.getString(0); Integer count = counts.get(word); if (count == null) count = 0; count++; counts.put(word, count); collector.emit(new Values(word, count)); &#125; @Override public void declareOutputFields(OutputFieldsDeclarer declarer) &#123; declarer.declare(new Fields(\"word\", \"count\")); &#125; &#125; /** * 主方法 */ public static void main(String[] args) throws Exception &#123; TopologyBuilder builder = new TopologyBuilder(); // 设置输入 builder.setSpout(\"spout\", new RandomSentenceSpout(), 5); // 计算 builder.setBolt(\"split\", new SplitSentence(), 8).shuffleGrouping(\"spout\"); builder.setBolt(\"count\", new WordCount(), 12).fieldsGrouping(\"split\", new Fields(\"word\")); Config conf = new Config(); conf.setDebug(true); if (args != null &amp;&amp; args.length &gt; 0) &#123; conf.setNumWorkers(3); StormSubmitter.submitTopologyWithProgressBar(args[0], conf, builder.createTopology()); &#125; else &#123; conf.setMaxTaskParallelism(3); LocalCluster cluster = new LocalCluster(); cluster.submitTopology(\"word-count\", conf, builder.createTopology()); Thread.sleep(10000); cluster.shutdown(); &#125; &#125;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"http://corey.wang/categories/技术/"}],"tags":[{"name":"storm,bigdata","slug":"storm-bigdata","permalink":"http://corey.wang/tags/storm-bigdata/"}]},{"title":"推荐使用Hexo搭建个人博客","slug":"hello-world","date":"2017-03-01T10:20:29.000Z","updated":"2018-08-17T01:01:49.459Z","comments":true,"path":"2017/03/01/hello-world/","link":"","permalink":"http://corey.wang/2017/03/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Hexo博客部署到Github超完美教程","categories":[{"name":"技术","slug":"技术","permalink":"http://corey.wang/categories/技术/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://corey.wang/tags/Hexo/"}]}]}